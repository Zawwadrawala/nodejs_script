"welcome backin the previous video we had a look atmicro task queues and their order ofpriority when executing asynchronouscodeif you haven't watched that video pleasedo so before continuingif you have watched that video Let'sproceed to understand about the timerqueue in this videobefore we run our experiment I want tomention to queue a callback functioninto the timer queue we can use eitherthe set timeout function or the setinterval functionI will be using set timeout for the restof the serieshere is the Syntax for your referencethe first argument is the Callbackfunction and the second argument is thedelaylet's head back to vs code and run ourexperimentfor our third experiment we are going toqueue up tasks in both microtask queuesas well as the timer queueand for this experiment I'm going tocontinue from where we left offwe have three process dot next dig callsfollowed by three promise dot resultswe have two additional process.net stickcalls from within the Callback functionsif we run this codewe see the output and an explanation ofthis output was already discussed in theprevious videobut it should be clear that our codesnippet currently queues up callbackfunctions in both the micro task queuesnext stick as for Last Promisenow let's queue up a few callbacks inthe timer queueat the topI'm going to copy paste three functioncalls to set timeoutall of them have a delay of 0milliseconds which implies the Callbackfunctions are queued up as soon as eachset timeout statement is executed on thecall stackI want you to now pause for a minute andtry figure out the outputall right if I now run node indexwe see the same output as the last videoand then we have three more logstatements at the endand these log statements correspond tothe three set timeout functionsset timeout 1 2 and 3.from this we have our inference for thethird experimentcallbacks in the micro task queues areexecuted before callbacks in the timerqueuepretty straightforward to understand ifyou've been following along from theprevious two videosbut let me also quickly help you withthe visualizationwhen the call stack executes all thestatements in our code snippet we end upwith three callbacks in the next queuethree in the promise queue and three inthe timer queuenow there is no further code to executeand control enters the event cluehere next to queue gets priorityfollowed by promise queue which is Thenfollowed by timer Qfirst callback from the next EQ is dq'dand executed which locks a message tothe consolethis is followed by the second callbackwhich also logs a messagethe second callback contains anadditional call to process.nxtickresulting in a new callback in the nextqueueexecution continues and the thirdcallback is dq'd and executed whichlocks a message as wellfinally the newly added callback also isdq'd and run on the call stackthis results in the fourth log statementin the consolenow that the next queue is empty eventLoop proceeds to the promise queuefirst callback is dq'd and executed onthe call stack printing a message to theconsolesecond callback also has a similareffectin addition to the log statement it alsoadds a callback to the next stick queuenext the third callback in the promisequeue is executed resulting in the nextlog messageat this point the promise queue is emptyand the event Loop checks the next EQ tosee if there are new callbacksthere is one and the same is executednow both the micro task queues are emptyevent Loop moves on to the timer queuewe have three callbacks and each of themare dequeued and executed on the callstack one by onethis will print set timeout 1 2 and 3.hopefully you're able to follow alongall right so far the order of priorityis next q then the promise queue andthen the timer Qlet's now proceed to experiment numberfourthe code will pretty much remain thesame as experiment number three exceptfor one changewe are going to slightly modify theCallback function passed to the secondset timeout functionI'm going to copy paste the codeso we still have the log statement thisis set timeout 2but after the log statementwe have an additional call to processDot nextdecthis will contain a callback functionwhich logs this is the inner next taginside set timeoutnow for the second time in this video Iwould like you to pause and try figureout the outputall right let me now run node indexyou can pause and verify the output butlet me tell you that there is no changeexcept for the last part which is to dowith set timeoutthis time we can see that the inner nextcallback function inside set timeout isexecuted before the final set timeoutcallback functionand this is our inference from thefourth experimentcallbacks in micro task queues areexecuted in between the execution ofcallbacks in the timer queuelet me help you with visualizationthis time though I'm going to skip tothe part where callbacks in the microtask queues have already been executedwe start at a point where threecallbacks are queued up in the timerqueuenowthe first callback is dq'd and executedon the call stack resulting in settimeout 1 message in the consoleevent Loop proceeds and runs the secondcallback as wellthis will result in set timer 2 messagein the consolebut this will also queue up a callbackfunction in the next thick queueand as we just learned after everycallback execution in the timer queuethe event Loop goes back and checks themicro task queuesit will check the next EQ and identifythere is a callback to be executedso that is dq'd and executed on the callstack resulting in the inner nextstickmessage in the consoleand to answer a question you mightpotentially haveyes this check did happen after thefirst callback as wellbut the microtask queues were empty andthus did not make a differenceanyway now that the micro task queuesare empty control goes back to the timerqueuethe last callback is executed resultingin set timer 3 message in the consolehopefully the inference makes senseas an exercise please do add apromise.result statement and verify thatthe previous inferences still hold goodall right for the fifth experiment whichwould be the final experiment in thisvideo let's run three simple set timeoutstatementsso comment out the existing code and atthe topadd three calls to set timeout withdifferent delaysone second 500 milliseconds and zerosecondspause and try figure out the outputthis should be straightforward as itinvolves only the timer queueall right if I now run node indexwe see set timer 3 first followed by 2and then 1.from thisour inference is thattimer Q callbacks are executed in fifoorder first n first outthey said timeout callback with theleast delay is the first one to bequeued up and is the first one to beexecuted by the event Loopand I'm sure this one does not need anyvisualizationbut I hope you now have a good idea ofthe order of priority of synchronouscode plus micro task queue callbacksplus timer Q callbacksone point I would like to mention hereis that the timer queue is technicallynot a queueit is a Min Heap data structurebut for our understanding thinking it isa cue makes the process simplerall right in the next video Let'sunderstand about the next q which is theioqthank you for watching please doconsider subscribing to the channel andI'll see you in the next video"
