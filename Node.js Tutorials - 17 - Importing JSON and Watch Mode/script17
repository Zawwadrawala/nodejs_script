welcome back for the final video in this section let's import some Json data Json stands for JavaScript object notation and is a data interchange format commonly used with web servers.
in this video Let's briefly understand how importing Json file as a module works with node.js.
back in vs code I'm going to begin by creating a new file data dot Json.
Json data is similar to a JavaScript object but the key is also wrapped with quotes.
let's add a sample Json.
curly braces.
property name.
set to Bruce Wayne.
and address.
which is an object with Street main manner and City got them.
now back in index.js we can load the file const data is equal to require dot slash data dot Json in the next line let's log data to the console.
in the terminal if we now run node index we see the Json data as a JavaScript object and this is the default behavior in node.js if we import a Json file the require function will parse the contents into a JavaScript object we can now Access Data dot name run node index and we see just Bruce Way.
the other point to know is that for Json files as well you can ignore the dot Json extension while importing.
so require dot slash data if I re run node index we see the same result, however you should know that node.js will first try to find data.js before trying to find data.json.
if a data.js file were to exist in your folder node would import that file and not the Json file which may lead to issues.
my suggestion is to always use the extension when importing Json files.
all right before we wind up this section I want to quickly talk about watch mode in node.js if I add a log statement hello world every time we make a change to this file we have to re-run node index to view the output in the terminal.
now this of course is not a major pain point but in version 18 node introduced the watch mode.
running in watch mode as we call it, restarts the process when there is a change in the imported code.
to run index.js in watch mode in the terminal.  run the command node dash dash watch followed by the file name when we run the command we see a warning that watch mode is an experimental feature which is fine for us and we see the output hello world.
if you now update hello world to hello Vishwas and save the file we see the updated output in the terminal right away.
 hello Vishwas.
as you can see the watch mode constantly watches for changes in your code and restarts the process often you will see yourself having to modify file contents and verifying the output.
the watch mode is very helpful in such a scenario and is a nice Improvement to developer experience.
I may not use it throughout the series as we do have to run different filenames in different videos but that was just a quick detour about watch mode.
with that we come to the end of this section on local modules in node.js.
we started off by understanding what isa module what is the need for modules and what are the types of modules in node we then started focusing only on local modules which are modules we create and share within our application.
we learned about the common JS module format the required function and module.exports keyword for importing and exporting modules.
we learned that each module is wrapped in an iffy and has a private scope.
the if we injects five parameters which can be used within the module.
we also learned about module caching we proceeded to understand the different patterns for importing and exporting modules in both common JS and Es modules format finally we had a look at importing Json data and the newly introduced watch mode.
that completes our list of topics to discuss about local modules.
in the next section let's learn about the built-in modules in node.js.
thank you for watching please do consider subscribing to the channel and I'll see you in the next video
